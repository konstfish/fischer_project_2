// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pop3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pop3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pop3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pop3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pop3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pop3_2eproto;
namespace pop3msg {
class MailList;
class MailListDefaultTypeInternal;
extern MailListDefaultTypeInternal _MailList_default_instance_;
class MailMeta;
class MailMetaDefaultTypeInternal;
extern MailMetaDefaultTypeInternal _MailMeta_default_instance_;
class Success;
class SuccessDefaultTypeInternal;
extern SuccessDefaultTypeInternal _Success_default_instance_;
}  // namespace pop3msg
PROTOBUF_NAMESPACE_OPEN
template<> ::pop3msg::MailList* Arena::CreateMaybeMessage<::pop3msg::MailList>(Arena*);
template<> ::pop3msg::MailMeta* Arena::CreateMaybeMessage<::pop3msg::MailMeta>(Arena*);
template<> ::pop3msg::Success* Arena::CreateMaybeMessage<::pop3msg::Success>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pop3msg {

// ===================================================================

class MailMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pop3msg.MailMeta) */ {
 public:
  inline MailMeta() : MailMeta(nullptr) {}
  virtual ~MailMeta();

  MailMeta(const MailMeta& from);
  MailMeta(MailMeta&& from) noexcept
    : MailMeta() {
    *this = ::std::move(from);
  }

  inline MailMeta& operator=(const MailMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailMeta& operator=(MailMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MailMeta& default_instance();

  static inline const MailMeta* internal_default_instance() {
    return reinterpret_cast<const MailMeta*>(
               &_MailMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MailMeta& a, MailMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(MailMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MailMeta* New() const final {
    return CreateMaybeMessage<MailMeta>(nullptr);
  }

  MailMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MailMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MailMeta& from);
  void MergeFrom(const MailMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pop3msg.MailMeta";
  }
  protected:
  explicit MailMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pop3_2eproto);
    return ::descriptor_table_pop3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kDateFieldNumber = 4,
    kMessageIdFieldNumber = 1,
  };
  // optional string from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // optional string subject = 3;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // optional string date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional int32 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pop3msg.MailMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_id_;
  friend struct ::TableStruct_pop3_2eproto;
};
// -------------------------------------------------------------------

class MailList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pop3msg.MailList) */ {
 public:
  inline MailList() : MailList(nullptr) {}
  virtual ~MailList();

  MailList(const MailList& from);
  MailList(MailList&& from) noexcept
    : MailList() {
    *this = ::std::move(from);
  }

  inline MailList& operator=(const MailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailList& operator=(MailList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MailList& default_instance();

  static inline const MailList* internal_default_instance() {
    return reinterpret_cast<const MailList*>(
               &_MailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MailList& a, MailList& b) {
    a.Swap(&b);
  }
  inline void Swap(MailList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MailList* New() const final {
    return CreateMaybeMessage<MailList>(nullptr);
  }

  MailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MailList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MailList& from);
  void MergeFrom(const MailList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pop3msg.MailList";
  }
  protected:
  explicit MailList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pop3_2eproto);
    return ::descriptor_table_pop3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 1,
  };
  // repeated .pop3msg.MailMeta mails = 1;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::pop3msg::MailMeta* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pop3msg::MailMeta >*
      mutable_mails();
  private:
  const ::pop3msg::MailMeta& _internal_mails(int index) const;
  ::pop3msg::MailMeta* _internal_add_mails();
  public:
  const ::pop3msg::MailMeta& mails(int index) const;
  ::pop3msg::MailMeta* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pop3msg::MailMeta >&
      mails() const;

  // @@protoc_insertion_point(class_scope:pop3msg.MailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pop3msg::MailMeta > mails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pop3_2eproto;
};
// -------------------------------------------------------------------

class Success PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pop3msg.Success) */ {
 public:
  inline Success() : Success(nullptr) {}
  virtual ~Success();

  Success(const Success& from);
  Success(Success&& from) noexcept
    : Success() {
    *this = ::std::move(from);
  }

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }
  inline Success& operator=(Success&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Success& default_instance();

  static inline const Success* internal_default_instance() {
    return reinterpret_cast<const Success*>(
               &_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Success& a, Success& b) {
    a.Swap(&b);
  }
  inline void Swap(Success* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Success* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Success* New() const final {
    return CreateMaybeMessage<Success>(nullptr);
  }

  Success* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Success>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Success& from);
  void MergeFrom(const Success& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Success* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pop3msg.Success";
  }
  protected:
  explicit Success(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pop3_2eproto);
    return ::descriptor_table_pop3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kValidFieldNumber = 2,
  };
  // optional string message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // optional int32 valid = 2;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 valid() const;
  void set_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_valid() const;
  void _internal_set_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pop3msg.Success)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 valid_;
  friend struct ::TableStruct_pop3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MailMeta

// optional int32 message_id = 1;
inline bool MailMeta::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MailMeta::has_message_id() const {
  return _internal_has_message_id();
}
inline void MailMeta::clear_message_id() {
  message_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MailMeta::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MailMeta::message_id() const {
  // @@protoc_insertion_point(field_get:pop3msg.MailMeta.message_id)
  return _internal_message_id();
}
inline void MailMeta::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  message_id_ = value;
}
inline void MailMeta::set_message_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:pop3msg.MailMeta.message_id)
}

// optional string from = 2;
inline bool MailMeta::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MailMeta::has_from() const {
  return _internal_has_from();
}
inline void MailMeta::clear_from() {
  from_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MailMeta::from() const {
  // @@protoc_insertion_point(field_get:pop3msg.MailMeta.from)
  return _internal_from();
}
inline void MailMeta::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:pop3msg.MailMeta.from)
}
inline std::string* MailMeta::mutable_from() {
  // @@protoc_insertion_point(field_mutable:pop3msg.MailMeta.from)
  return _internal_mutable_from();
}
inline const std::string& MailMeta::_internal_from() const {
  return from_.Get();
}
inline void MailMeta::_internal_set_from(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MailMeta::set_from(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pop3msg.MailMeta.from)
}
inline void MailMeta::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pop3msg.MailMeta.from)
}
inline void MailMeta::set_from(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pop3msg.MailMeta.from)
}
inline std::string* MailMeta::_internal_mutable_from() {
  _has_bits_[0] |= 0x00000001u;
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MailMeta::release_from() {
  // @@protoc_insertion_point(field_release:pop3msg.MailMeta.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MailMeta::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pop3msg.MailMeta.from)
}

// optional string subject = 3;
inline bool MailMeta::_internal_has_subject() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MailMeta::has_subject() const {
  return _internal_has_subject();
}
inline void MailMeta::clear_subject() {
  subject_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MailMeta::subject() const {
  // @@protoc_insertion_point(field_get:pop3msg.MailMeta.subject)
  return _internal_subject();
}
inline void MailMeta::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:pop3msg.MailMeta.subject)
}
inline std::string* MailMeta::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:pop3msg.MailMeta.subject)
  return _internal_mutable_subject();
}
inline const std::string& MailMeta::_internal_subject() const {
  return subject_.Get();
}
inline void MailMeta::_internal_set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MailMeta::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subject_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pop3msg.MailMeta.subject)
}
inline void MailMeta::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pop3msg.MailMeta.subject)
}
inline void MailMeta::set_subject(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pop3msg.MailMeta.subject)
}
inline std::string* MailMeta::_internal_mutable_subject() {
  _has_bits_[0] |= 0x00000002u;
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MailMeta::release_subject() {
  // @@protoc_insertion_point(field_release:pop3msg.MailMeta.subject)
  if (!_internal_has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subject_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MailMeta::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pop3msg.MailMeta.subject)
}

// optional string date = 4;
inline bool MailMeta::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MailMeta::has_date() const {
  return _internal_has_date();
}
inline void MailMeta::clear_date() {
  date_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MailMeta::date() const {
  // @@protoc_insertion_point(field_get:pop3msg.MailMeta.date)
  return _internal_date();
}
inline void MailMeta::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pop3msg.MailMeta.date)
}
inline std::string* MailMeta::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pop3msg.MailMeta.date)
  return _internal_mutable_date();
}
inline const std::string& MailMeta::_internal_date() const {
  return date_.Get();
}
inline void MailMeta::_internal_set_date(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MailMeta::set_date(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pop3msg.MailMeta.date)
}
inline void MailMeta::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pop3msg.MailMeta.date)
}
inline void MailMeta::set_date(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pop3msg.MailMeta.date)
}
inline std::string* MailMeta::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000004u;
  return date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MailMeta::release_date() {
  // @@protoc_insertion_point(field_release:pop3msg.MailMeta.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return date_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MailMeta::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pop3msg.MailMeta.date)
}

// -------------------------------------------------------------------

// MailList

// repeated .pop3msg.MailMeta mails = 1;
inline int MailList::_internal_mails_size() const {
  return mails_.size();
}
inline int MailList::mails_size() const {
  return _internal_mails_size();
}
inline void MailList::clear_mails() {
  mails_.Clear();
}
inline ::pop3msg::MailMeta* MailList::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:pop3msg.MailList.mails)
  return mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pop3msg::MailMeta >*
MailList::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:pop3msg.MailList.mails)
  return &mails_;
}
inline const ::pop3msg::MailMeta& MailList::_internal_mails(int index) const {
  return mails_.Get(index);
}
inline const ::pop3msg::MailMeta& MailList::mails(int index) const {
  // @@protoc_insertion_point(field_get:pop3msg.MailList.mails)
  return _internal_mails(index);
}
inline ::pop3msg::MailMeta* MailList::_internal_add_mails() {
  return mails_.Add();
}
inline ::pop3msg::MailMeta* MailList::add_mails() {
  // @@protoc_insertion_point(field_add:pop3msg.MailList.mails)
  return _internal_add_mails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pop3msg::MailMeta >&
MailList::mails() const {
  // @@protoc_insertion_point(field_list:pop3msg.MailList.mails)
  return mails_;
}

// -------------------------------------------------------------------

// Success

// optional string message_id = 1;
inline bool Success::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Success::has_message_id() const {
  return _internal_has_message_id();
}
inline void Success::clear_message_id() {
  message_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Success::message_id() const {
  // @@protoc_insertion_point(field_get:pop3msg.Success.message_id)
  return _internal_message_id();
}
inline void Success::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:pop3msg.Success.message_id)
}
inline std::string* Success::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:pop3msg.Success.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& Success::_internal_message_id() const {
  return message_id_.Get();
}
inline void Success::_internal_set_message_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Success::set_message_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pop3msg.Success.message_id)
}
inline void Success::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pop3msg.Success.message_id)
}
inline void Success::set_message_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pop3msg.Success.message_id)
}
inline std::string* Success::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000001u;
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Success::release_message_id() {
  // @@protoc_insertion_point(field_release:pop3msg.Success.message_id)
  if (!_internal_has_message_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Success::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pop3msg.Success.message_id)
}

// optional int32 valid = 2;
inline bool Success::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Success::has_valid() const {
  return _internal_has_valid();
}
inline void Success::clear_valid() {
  valid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Success::_internal_valid() const {
  return valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Success::valid() const {
  // @@protoc_insertion_point(field_get:pop3msg.Success.valid)
  return _internal_valid();
}
inline void Success::_internal_set_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  valid_ = value;
}
inline void Success::set_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:pop3msg.Success.valid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pop3msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pop3_2eproto
